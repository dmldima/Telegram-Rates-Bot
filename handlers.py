from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message
from utils.memory_store import set_pair, get_pair, delete_pair
from utils.validation import validate_pair_text, normalize_amount
from utils.date_utils import parse_date_any
from services.currency_service import get_major_rate, get_uah_rate
from utils.logger import setup_logger

logger = setup_logger(__name__)
router = Router()


def format_date_european(iso_date: str) -> str:
    """Convert YYYY-MM-DD to DD.MM.YYYY"""
    try:
        parts = iso_date.split('-')
        if len(parts) == 3:
            return f"{parts[2]}.{parts[1]}.{parts[0]}"
        return iso_date
    except:
        return iso_date


@router.message(Command("start", "help"))
async def cmd_help(message: Message):
    """Handle /start and /help commands."""
    user_id = message.from_user.id
    username = message.from_user.first_name or "User"
    logger.info(f"User {user_id} ({username}) requested help")
    
    text = (
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {username}!\n\n"
        "üí± **Currency Rate Bot**\n\n"
        "**–ö–æ–º–∞–Ω–¥–∏:**\n"
        "‚Ä¢ `/pair BASE/TARGET` ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É\n"
        "  –ü—Ä–∏–∫–ª–∞–¥: `/pair EUR/USD` –∞–±–æ `/pair uah usd`\n"
        "‚Ä¢ `/reset` ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É\n"
        "‚Ä¢ `/help` ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
        "1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–∞—Ä—É: `/pair UAH/USD`\n"
        "2Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É:\n"
        "   ‚Ä¢ `21.04.2025`\n"
        "   ‚Ä¢ `today`, `yesterday`\n"
        "   ‚Ä¢ `2 days ago`\n"
        "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å—É–º—É + –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:\n"
        "   ‚Ä¢ `100 21.04.2025`\n"
        "   ‚Ä¢ `1000,50 today`\n"
        "   ‚Ä¢ `1 000,50 yesterday`\n\n"
        "**–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–∞—Ä–∏:**\n"
        "–û—Å–Ω–æ–≤–Ω—ñ: EUR/USD, EUR/GBP, EUR/CHF, USD/EUR, USD/GBP, USD/CHF\n"
        "UAH: UAH/USD, UAH/EUR, UAH/GBP, UAH/CHF, UAH/PLN\n"
        "      USD/UAH, EUR/UAH, GBP/UAH, CHF/UAH, PLN/UAH\n\n"
        "üí° **–ü—ñ–¥–∫–∞–∑–∫–∏:**\n"
        "‚Ä¢ –î–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –∞–±–æ –†–†–†–†-–ú–ú-–î–î\n"
        "‚Ä¢ –ö–æ–¥–∏ –≤–∞–ª—é—Ç: UAH, USD, EUR, GBP, CHF, PLN\n"
        "‚Ä¢ –°—É–º–∏ –∑ –∫–æ–º–∞–º–∏ –∞–±–æ –ø—Ä–æ–±—ñ–ª–∞–º–∏: 1,000.50 –∞–±–æ 1 000,50"
    )
    await message.answer(text, parse_mode="Markdown")


@router.message(Command("pair"))
async def cmd_pair(message: Message):
    """Handle /pair command to set currency pair."""
    user_id = message.from_user.id
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É.\n\n"
                "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:** `/pair UAH/USD`\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
                "‚Ä¢ `/pair UAH/USD`\n"
                "‚Ä¢ `/pair uah usd`\n"
                "‚Ä¢ `/pair EUR/UAH`\n"
                "‚Ä¢ `/pair PLN/UAH`",
                parse_mode="Markdown"
            )
            return
        
        base, target = validate_pair_text(parts[1])
        set_pair(user_id, base, target)
        logger.info(f"User {user_id} set pair: {base}/{target}")
        
        await message.answer(
            f"‚úÖ –í–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{base}/{target}**\n\n"
            f"–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –¥–∞—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤!\n"
            f"–ü—Ä–∏–∫–ª–∞–¥: `21.04.2025` –∞–±–æ `100 today`",
            parse_mode="Markdown"
        )
    except ValueError as e:
        logger.warning(f"Validation error for user {user_id}: {e}")
        await message.answer(str(e), parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Unexpected error in cmd_pair: {e}", exc_info=True)
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@router.message(Command("reset"))
async def cmd_reset(message: Message):
    """Handle /reset command to clear currency pair."""
    user_id = message.from_user.id
    deleted = delete_pair(user_id)
    
    if deleted:
        logger.info(f"User {user_id} reset their pair")
        await message.answer(
            "‚úÖ –í–∞—à—É –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É —Å–∫–∏–Ω—É—Ç–æ.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/pair UAH/USD` —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—É.",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó –≤–∞–ª—é—Ç–Ω–æ—ó –ø–∞—Ä–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/pair UAH/USD` —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏.",
            parse_mode="Markdown"
        )


@router.message(F.text)
async def on_date_or_amount(message: Message):
    """Handle text messages with dates and optional amounts."""
    user_id = message.from_user.id
    text = message.text.strip()
    
    pair = get_pair(user_id)
    if not pair:
        logger.info(f"User {user_id} tried to query without setting pair")
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É!\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: `/pair UAH/USD`\n\n"
            "–î–∏–≤. `/help` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
            parse_mode="Markdown"
        )
        return
    
    base, target = pair
    amount = None
    date_text = text
    
    parts = text.split(maxsplit=1)
    if len(parts) >= 2:
        first_part = parts[0].replace(',', '').replace(' ', '').replace('.', '', 1)
        if first_part.replace('.', '', 1).isdigit() or first_part.replace(',', '', 1).isdigit():
            try:
                amount = normalize_amount(parts[0])
                date_text = parts[1]
                logger.debug(f"Extracted amount: {amount}, date: {date_text}")
            except ValueError as e:
                logger.warning(f"Failed to parse amount: {e}")
                await message.answer(str(e))
                return
    
    try:
        date = parse_date_any(date_text)
        logger.debug(f"Parsed date: {date} from '{date_text}'")
    except ValueError as e:
        logger.warning(f"Failed to parse date for user {user_id}: {e}")
        await message.answer(str(e), parse_mode="Markdown")
        return
    except Exception as e:
        logger.error(f"Unexpected error parsing date: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏: `21.04.2025`, `2025-04-21`, `today`",
            parse_mode="Markdown"
        )
        return
    
    rate_result = None
    try:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # Determine which API to use
        if base == "UAH" or target == "UAH":
            rate_result = await get_uah_rate(base, target, date)
        else:
            rate_result = await get_major_rate(base, target, date)
        
        if rate_result:
            rate, actual_date, is_fallback = rate_result
            logger.info(f"Fetched rate for {base}/{target} on {date}: {rate} (actual: {actual_date}, fallback: {is_fallback})")
        else:
            rate_result = None
    except Exception as e:
        logger.error(f"Error fetching rate: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –æ–±–º—ñ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    if rate_result is None:
        logger.warning(f"No rate found for {base}/{target} on {date}")
        await message.answer(
            f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫—É—Ä—Å –æ–±–º—ñ–Ω—É –¥–ª—è **{base}/{target}** –Ω–∞ {format_date_european(date)}.\n\n"
            "–¶–µ –º–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—è —è–∫—â–æ:\n"
            "‚Ä¢ –î–∞—Ç–∞ –Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∞\n"
            "‚Ä¢ –î–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É\n"
            "‚Ä¢ –¶–µ –≤–∏—Ö—ñ–¥–Ω–∏–π/—Å–≤—è—Ç–æ (—Å–ø—Ä–æ–±—É–π—Ç–µ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å)\n"
            "‚Ä¢ API —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ\n\n"
            "üí° –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ `/help` –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
            parse_mode="Markdown"
        )
        return
    
    rate, actual_date, is_fallback = rate_result
    actual_date_eu = format_date_european(actual_date)
    
    fallback_warning = ""
    if is_fallback:
        fallback_warning = f"\n\n‚ö†Ô∏è **–£–≤–∞–≥–∞:** –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ {format_date_european(date)}.\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á—É –¥–∞—Ç—É: **{actual_date_eu}**"
    
    if amount is not None:
        result = amount * rate
        if result < 0.01:
            result_str = f"{result:.6f}"
        elif result < 1:
            result_str = f"{result:.4f}"
        elif result < 1000:
            result_str = f"{result:.2f}"
        else:
            result_str = f"{result:,.2f}"
        
        response = (
            f"üíµ **–†–µ–∑—É–ª—å—Ç–∞—Ç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó**\n\n"
            f"`{amount:,.2f} {base}` = **{result_str} {target}**\n\n"
            f"üìÖ –î–∞—Ç–∞: {actual_date_eu}\n"
            f"üìä –ö—É—Ä—Å: 1 {base} = {rate:.6f} {target}"
            f"{fallback_warning}"
        )
        logger.info(f"Conversion: {amount} {base} = {result_str} {target} on {actual_date}")
    else:
        response = (
            f"üí± **–ö—É—Ä—Å –û–±–º—ñ–Ω—É**\n\n"
            f"**{base}/{target}**\n"
            f"1 {base} = **{rate:.6f} {target}**\n\n"
            f"üìÖ –î–∞—Ç–∞: {actual_date_eu}\n\n"
            f"üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –ù–∞–¥—ñ—à–ª—ñ—Ç—å `—Å—É–º–∞ –¥–∞—Ç–∞` –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó\n"
            f"–ü—Ä–∏–∫–ª–∞–¥: `100 {actual_date_eu}`"
            f"{fallback_warning}"
        )
        logger.info(f"Rate query: {base}/{target} on {actual_date} = {rate}")
    
    await message.answer(response, parse_mode="Markdown")
